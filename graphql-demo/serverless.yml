service: graphql-citn2018

frameworkVersion: ">=1.8.0 <2.0.0"

custom:
  config: ${file(./config/${opt:stage, self:provider.stage}.yml):config}

provider:
  name: aws
  runtime: nodejs6.10
  region: us-east-2
  environment:
    JOKES_TABLE: ${self:custom.config.jokesTable}
    JOKE_AUTHORS_TABLE: ${self:custom.config.jokeAuthorsTable}
    SERVERLESS_REGION: ${opt:region, self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:table/${self:provider.environment.JOKES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${self:provider.environment.SERVERLESS_REGION}:*:table/${self:provider.environment.JOKE_AUTHORS_TABLE}

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get

  graphql:
    handler: handler.runGraphql
    events:
      - http:
          path: graphql
          method: post
          cors: true

resources:
  Resources:
    JokesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.config.jokesTable}
    JokeAuthorsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.config.jokeAuthorsTable}
